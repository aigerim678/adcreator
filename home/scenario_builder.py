# import os
# from dotenv import load_dotenv
# from groq import Groq

# env_path = os.path.join(os.path.dirname(__file__), "..", ".env")
# load_dotenv(env_path)

# groq_api_key = os.getenv("GROQ_API_KEY")


# client = Groq(api_key=groq_api_key)
# completion = client.chat.completions.create(
#     model="llama3-8b-8192",
#     messages=[
#         {
#             "role": "system",
#             "content": "\"Напиши три варианта ответа в пяти блоках на тему который указан в user message. Ответ должен быть информативным, поддерживающим и убедительным. Упомяни меры безопасности, предпринятые для защиты клиентов, приведи примеры услуг, которые мы предоставляем, и подчеркни профессионализм мастеров. Не забывай добавить призыв к действию в конце каждого варианта.\"\n\nПример ответа\n\nВариант 1\n\nМы работаем для вас даже в самые сложные времена!\n\nНаша компания не прекращала работу во время карантина, чтобы вы могли быть уверены в надёжности своего автомобиля. Мы заботимся о безопасности и комфорте наших клиентов, поэтому соблюдаем все необходимые меры предосторожности.\n\nНаши мастера прошли дополнительную подготовку по работе в условиях пандемии, а также используют средства индивидуальной защиты. Это позволяет нам гарантировать безопасность и качество предоставляемых услуг.\n\nМы предлагаем широкий спектр услуг по ремонту и обслуживанию автомобилей различных марок и моделей. Наши специалисты имеют большой опыт работы и готовы решить любую проблему с вашим автомобилем.\n\nНе рискуйте безопасностью и комфортом — доверьте свой автомобиль профессионалам!\n\nВариант 2\n\nКак мы работали во время карантина\n\nВ это непростое время многие компании были вынуждены приостановить свою деятельность. Но только не мы! Наша компания продолжала работать, чтобы обеспечить вам качественный сервис и поддержку.\n\nВо время карантина мы приняли дополнительные меры безопасности, чтобы защитить наших сотрудников и клиентов. Мы следим за соблюдением всех необходимых мер предосторожности, включая использование средств индивидуальной защиты и регулярную дезинфекцию помещений.\n\nНесмотря на все трудности, мы продолжаем предоставлять вам высококачественные услуги по ремонту и техническому обслуживанию автомобилей. Наши мастера имеют большой опыт и знания, которые позволяют им быстро и эффективно решать любые проблемы с вашим авто.\n\nЕсли у вас возникли вопросы или нужна помощь, обращайтесь к нам. Мы всегда готовы помочь!\n\nВариант 3\n\nРабота автосервиса во время карантина: как мы обеспечиваем вашу безопасность\n\nКарантин стал настоящим испытанием для многих компаний. Однако наша компания продолжает работать, чтобы предоставить вам качественные услуги и поддержку.\n\nМы понимаем, что в это непростое время важно соблюдать все меры предосторожности. Поэтому мы приняли ряд дополнительных мер безопасности, чтобы защитить вас и наших сотрудников.\n\nВсе наши мастера проходят дополнительную подготовку по работе в условиях карантина. Они используют средства индивидуальной защиты, регулярно дезинфицируют помещения и инструменты.\n\nКроме того, мы строго следим за тем, чтобы все клиенты соблюдали социальную дистанцию и использовали средства индивидуальной защиты при посещении нашего сервиса.\n\nДоверьте свой автомобиль нам, и мы позаботимся о его безопасности и надёжности!"
#         },
#         {
#             "role": "user",
#             "content": "история про работу парикмахерской во время карантина на русском"
#         }
#     ],
#     temperature=1,
#     max_tokens=1024,
#     top_p=1,
#     stream=True,
#     stop=None,
# )

# for chunk in completion:
#     print(chunk.choices[0].delta.content or "", end="")



import os
import time
from dotenv import load_dotenv
import requests
from .views import video_file_url, audio_file_url

# Загрузка API ключа из .env файла
env_path = os.path.join(os.path.dirname(__file__), "..", ".env")
load_dotenv(env_path)

video_api_key = os.getenv("VIDEO_API_KEY")

# Начальный запрос на генерацию видео
url = "https://api.sync.so/v2/generate"
payload = {
    "model": "lipsync-1.7.1",
    "input": [
        {
            "type": "video",
            "url": video_file_url
        },
        {
            "type": "audio",
            "url": audio_file_url
        }
    ],
    "options": {"output_format": "mp4"}
}

headers = {
    "x-api-key": video_api_key,
    "Content-Type": "application/json"
}

response = requests.post(url, json=payload, headers=headers)

# Получаем ID задачи из ответа
response_data = response.json()
task_id = response_data.get("id")

if not task_id:
    print("Ошибка: Не удалось создать задачу.")
else:
    # URL для опроса статуса задачи
    polling_url = f"https://api.sync.so/v2/generate/{task_id}"

    while True:
        # Опрос API для получения статуса задачи
        poll_response = requests.get(polling_url, headers=headers)
        poll_data = poll_response.json()

        status = poll_data.get("status")

        if status == "COMPLETED":
            # Задача завершена успешно
            output_url = poll_data.get("outputUrl")
            print("Видео успешно сгенерировано:", output_url)
            break
        elif status == "FAILED":
            # Произошла ошибка
            error = poll_data.get("error")
            print("Ошибка при генерации видео:", error)
            break
        else:
            # Задача все еще обрабатывается, подождем 5 секунд
            print("Задача все еще обрабатывается...")
            time.sleep(5)

